import java.util.regex.Matcher
import java.util.regex.Pattern

ext {
    gitCommitMessage = this.getGitCommit()
    buildTime = this.buildTime()
    gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
    writeChangeLog = this.writeChangeLogIfNeeded(gitCommitMessage)
}

def getGitCommit() {
    def gitDir = new File("$rootDir/.git")
    if (!gitDir.isDirectory()) {
        return 'non-git-build'
    }
    def cmd = 'git log --pretty=format:"%s; commitId:{%h}, commitTime:%ad" -1'
//    def cmd = 'git rev-parse --short HEAD'
//    def cmd = 'git log --pretty=short -1'
//    def cmd = 'git log  -1'
//    def cmd = 'git cat-file -p HEAD'
//    def cmd = 'git log --pretty=format:"%an: %s" --since="2008-10-01"'
    def gitCommit = cmd.execute().text.trim()
    assert !gitCommit.isEmpty()
    gitCommit
}

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('YYYY-MM-dd-HH-mm')
    return formattedDate
}

def writeChangeLogIfNeeded(String commitInfo){
    Matcher m = Pattern.compile("[0-9a-z]{7}").matcher(commitInfo)
    String lastCommitId = m.find()?m.group():"no match last comiit id"
    File changeLogFile = new File("${rootDir.getPath()}/ChangeLog")
    if(!changeLogFile.exists()){
        changeLogFile.createNewFile()
    }
    String lastChangeLog = changeLogFile.getText()
    Matcher matcher = Pattern.compile(lastCommitId).matcher(lastChangeLog)
    if(!matcher.find()){
        changeLogFile.withWriterAppend { os ->
            os.writeLine(new String(commitInfo.getBytes("utf-8")))
        }
        println("update change Log! record = ${commitInfo}")
        1
    }else{
        println("change Log is Updated!")
        0
    }
}

task checkPostCommitFile(type:Copy){
    from "$rootDir\\post-commit"
    into "$rootDir\\.git\\hooks"
}

task recordChangeLog{
    writeChangeLog
}

afterEvaluate {
    checkPostCommitFile.execute()
}